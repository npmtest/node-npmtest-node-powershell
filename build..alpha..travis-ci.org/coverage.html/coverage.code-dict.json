{"/home/travis/build/npmtest/node-npmtest-node-powershell/test.js":"/* istanbul instrument in package npmtest_node_powershell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-powershell/lib.npmtest_node_powershell.js":"/* istanbul instrument in package npmtest_node_powershell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_powershell = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_powershell = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-powershell/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-powershell && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_powershell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_powershell\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_powershell.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_powershell.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_powershell.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_powershell.__dirname + '/lib.npmtest_node_powershell.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-powershell/node_modules/node-powershell/dist/index.js":"/*********************************************************\n * node-powershell - Certainly the easiest way to run PowerShell from your NodeJS app\n * @version v3.1.0\n * @link http://rannn505.github.io/node-powershell/\n * @copyright Copyright (c) 2017 Ran Cohen <rannn505@outlook.com>\n * @license MIT (http://www.opensource.org/licenses/mit-license.php)\n * @Compiled At: 2017-03-02\n  *********************************************************/\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Shell = require('./Shell');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _Shell.Shell;\n  }\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-node-powershell/node_modules/node-powershell/dist/Shell.js":"/*********************************************************\n * node-powershell - Certainly the easiest way to run PowerShell from your NodeJS app\n * @version v3.1.0\n * @link http://rannn505.github.io/node-powershell/\n * @copyright Copyright (c) 2017 Ran Cohen <rannn505@outlook.com>\n * @license MIT (http://www.opensource.org/licenses/mit-license.php)\n * @Compiled At: 2017-03-02\n  *********************************************************/\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar os = require('os');\nvar util = require('util');\nvar eventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar colors = require('chalk');\nvar promise = require('bluebird');\n\nvar MODULE_NAME = 'node-powershell';\nvar IS_WIN = os.platform() === 'win32';\nvar MODULE_MSG = colors.bold.blue('NPS> ');\nvar OK_MSG = colors.green;\nvar ERROR_MSG = colors.red;\nvar EOI = 'EOI';\n\n/**\r\n * The Shell class.\r\n *\r\n * @constructor\r\n * @param {Object} config The config for the shell instance. https://github.com/rannn505/node-powershell#initializeconstructor\r\n * @returns {Shell} A Shell instance which allows you to run PowerShell commands from your NodeJS app.\r\n * It exposes a simple API that bridges between your node and a PS child process.\r\n */\n\nvar Shell = exports.Shell = function (_eventEmitter) {\n  _inherits(Shell, _eventEmitter);\n\n  function Shell() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$executionPolicy = _ref.executionPolicy,\n        executionPolicy = _ref$executionPolicy === undefined ? 'Unrestricted' : _ref$executionPolicy,\n        _ref$inputEncoding = _ref.inputEncoding,\n        inputEncoding = _ref$inputEncoding === undefined ? 'utf8' : _ref$inputEncoding,\n        _ref$outputEncoding = _ref.outputEncoding,\n        outputEncoding = _ref$outputEncoding === undefined ? 'utf8' : _ref$outputEncoding,\n        _ref$debugMsg = _ref.debugMsg,\n        debugMsg = _ref$debugMsg === undefined ? true : _ref$debugMsg,\n        _ref$noProfile = _ref.noProfile,\n        noProfile = _ref$noProfile === undefined ? true : _ref$noProfile;\n\n    _classCallCheck(this, Shell);\n\n    // cmds bulk to run at the next invoke call\n    var _this = _possibleConstructorReturn(this, (Shell.__proto__ || Object.getPrototypeOf(Shell)).call(this));\n\n    _this._cmds = [];\n    // history of cmds\n    _this._history = [];\n    // global config for class\n    _this._cfg = {};\n    _this._cfg.debugMsg = debugMsg;\n\n    // arguments for PowerShell process\n    var _args = ['-NoLogo', '-NoExit', '-InputFormat', 'Text', '-Command', '-'];\n    if (noProfile) {\n      _args = ['-NoProfile'].concat(_toConsumableArray(_args));\n    }\n    if (IS_WIN) {\n      _args = ['-ExecutionPolicy', executionPolicy].concat(_toConsumableArray(_args));\n    }\n\n    // the PowerShell process\n    _this._proc = spawn('powershell' + (IS_WIN ? '.exe' : ''), _args, {\n      stdio: 'pipe'\n    });\n    if (!_this._proc.pid) {\n      throw new Error('Opss... ' + MODULE_NAME + ' was unable to start PowerShell.\\nPlease make sure that PowerShell is installed properly on your system, and try again.');\n    }\n    _this._proc.on('error', function (error) {\n      throw new Error('Opss... ' + MODULE_NAME + ' was unable to start PowerShell.\\nPlease make sure that PowerShell is installed properly on your system, and try again.');\n    });\n    _this._proc.stdin.setEncoding(inputEncoding);\n    _this._proc.stdout.setEncoding(outputEncoding);\n    _this._proc.stderr.setEncoding(outputEncoding);\n\n    // output to print after invoke call\n    var _output = [];\n    var _type = '_resolve';\n\n    _this._proc.stdout.on('data', function (data) {\n      if (data.indexOf(EOI) !== -1) {\n        _this.emit(_type, _output.join(''));\n        _output = [];\n        _type = '_resolve';\n      } else {\n        _this.emit('output', data);\n        _output.push(data);\n      }\n    });\n    _this._proc.stderr.on('data', function (error) {\n      _this.emit('err', error);\n      _output.push(error);\n      _type = '_reject';\n    });\n\n    // public props\n    _this.history = _this._history;\n    _this.streams = {\n      stdin: _this._proc.stdin,\n      stdout: _this._proc.stdout,\n      stderr: _this._proc.stderr\n    };\n\n    _this.__print__(OK_MSG, 'Process ' + _this._proc.pid + ' started\\n');\n    return _this;\n  }\n\n  _createClass(Shell, [{\n    key: '__print__',\n    value: function __print__(type, msg) {\n      this._cfg.debugMsg && console.log(MODULE_MSG + ' ' + type(msg));\n    }\n  }, {\n    key: 'addCommand',\n    value: function addCommand(command) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      var _self = this;\n      return new Promise(function (resolve, reject) {\n        if (!command) {\n          return reject(ERROR_MSG('Command is missing'));\n        }\n        if (!Array.isArray(params)) {\n          return reject(ERROR_MSG('Params must be an array'));\n        }\n        var _cmdStr = '' + command;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var param = _step.value;\n\n            var _type = Object.prototype.toString.call(param).slice(8, -1);\n            if (_type === 'Object') {\n              var _ret = function () {\n                // param is {name: '', value: ''} or {name: value}\n                var _keys = Object.keys(param);\n                var _name = void 0,\n                    _value = void 0;\n                if (_keys.length === 2 && _keys[0] === 'name' && _keys[1] === 'value') {\n                  // param is {name: '', value: ''}\n                  _name = param.name;\n                  _value = param.value;\n                } else if (_keys.length === 1 && _keys[0]) {\n                  // param is {name: value}\n                  _name = _keys[0];\n                  _value = param[_name];\n                } else {\n                  return {\n                    v: reject(ERROR_MSG('All objecct params need to be {name: \\'\\', value: \\'\\'} or {name: value} structure'))\n                  };\n                }\n                // cast param value from JS data types to PowerShell data types.\n                switch (Object.prototype.toString.call(_value).slice(8, -1)) {\n                  case 'String':\n                    _value = /\\s/.test(_value) || _value.indexOf('<') !== -1 && _value.indexOf('>') !== -1 ? '\"' + _value + '\"' : _value;\n                    break;\n                  case 'Number':\n                    _value = _value;\n                    break;\n                  case 'Array':\n                    _value = _value;\n                    break;\n                  case 'Boolean':\n                    _value = _value ? '$True' : '$False';\n                    break;\n                  case 'Date':\n                    _value = _value.toLocaleString();\n                    break;\n                  case 'Undefined' || 'Null':\n                    // param is switch\n                    _value = _value;\n                    break;\n                  default:\n                    _value = /\\s/.test(_value) ? '\"' + _value + '\"' : _value;\n                }\n                var _replaced = false;\n                _cmdStr = _cmdStr.replace('@' + _name, function (match) {\n                  _replaced = true;\n                  return '-' + _name + ' ' + _value;\n                });\n                if (!_replaced) {\n                  _cmdStr = _cmdStr.concat(' -' + _name + (_value ? ' ' + _value : ''));\n                }\n              }();\n\n              if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n            } else if (_type === 'String') {\n              // param is switch\n              _cmdStr = _cmdStr.concat(' -' + param);\n            } else {\n              return reject(ERROR_MSG('All Params need to be objects or strings'));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        ;\n        _self._cmds.push(_cmdStr);\n        _self._history.push(_cmdStr);\n        return resolve(_self._cmds);\n      });\n    }\n  }, {\n    key: 'invoke',\n    value: function invoke() {\n      var _self = this;\n      return new Promise(function (resolve, reject) {\n        var _cmdsStr = _self._cmds.join('; ');\n        _self.__print__(OK_MSG, 'Command invoke started');\n        _self._cfg.debugMsg && console.log(' ' + colors.gray(_cmdsStr));\n\n        function resolve_listener(data) {\n          _self.__print__(OK_MSG, 'Command invoke finished\\n');\n          reset();\n          return resolve(data);\n        }\n        function reject_listener(error) {\n          _self.__print__(ERROR_MSG, 'Command invoke failed\\n');\n          reset();\n          return reject(ERROR_MSG(error));\n        }\n        function reset() {\n          _self.removeListener('_resolve', resolve_listener);\n          _self.removeListener('_reject', reject_listener);\n          _self._cmds = [];\n        }\n\n        _self.on('_resolve', resolve_listener);\n        _self.on('_reject', reject_listener);\n\n        _self._proc.stdin.write(_cmdsStr);\n        _self._proc.stdin.write(os.EOL);\n        _self._proc.stdin.write('echo ' + EOI);\n        _self._proc.stdin.write(os.EOL);\n      });\n    }\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _self = this;\n      return new Promise(function (resolve, reject) {\n        _self._proc.on('close', function (code) {\n          var _exitMsg = 'Process ' + _self._proc.pid + ' exited with code ' + code + '\\n';\n          _self.emit('end', code);\n          if (code == 1) {\n            _self.__print__(ERROR_MSG, _exitMsg);\n            return reject(ERROR_MSG('script exit ' + code));\n          } else {\n            _self.__print__(OK_MSG, _exitMsg);\n            return resolve('script exit ' + code);\n          }\n        });\n\n        _self._proc.stdin.write('exit');\n        _self._proc.stdin.write(os.EOL);\n        _self._proc.stdin.end();\n      });\n    }\n  }]);\n\n  return Shell;\n}(eventEmitter);"}